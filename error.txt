In file included from /root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__execution_fwd.hpp:19,
                 from /root/project/cpp/asio2exec/stdexec/include/stdexec/execution.hpp:18,
                 from /root/project/cpp/asio2exec/examples/echo_server.cpp:1:
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp: In substitution of ‘template<const auto& _Fun, class ... _As> using stdexec::__result_of = decltype (_Fun((__declval<_As>)()...)) [with const auto& _Fun = stdexec::on; _As = {exec::__trampoline::__scheduler, stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>&}]’:
/root/project/cpp/asio2exec/stdexec/include/exec/repeat_effect_until.hpp:69:13:   required from ‘struct exec::__repeat_effect_until::__repeat_effect_state<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__let::__receiver_with_sched<stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t, asio2exec::__detail::scheduler_t> >’
/root/project/cpp/asio2exec/stdexec/include/exec/repeat_effect_until.hpp:171:79:   required from ‘exec::__repeat_effect_until::__repeat_effect_until_impl::<lambda(_Sender&&, _Receiver&)> [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__let::__receiver_with_sched<stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t, asio2exec::__detail::scheduler_t>]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:767:36:   required by substitution of ‘template<class _Tag, class _Sexpr, class _Receiver> using stdexec::__detail::__state_type_t = stdexec::__decay_t<decltype (stdexec::__sexpr_impl<_Tag>::get_state(__declval<_Sexpr>(), __declval<_Receiver&>()))> [with _Tag = exec::__repeat_effect_until::__repeat_effect_until_tag; _Sexpr = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__let::__receiver_with_sched<stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t, asio2exec::__detail::scheduler_t>]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:306:11:   required by substitution of ‘template<bool _AllOK> template<template<template<class ...> class _Fn, class ... _Args> template<bool _AllOK> template<class ...> class _Fn, class ... _Args> using stdexec::__i<_AllOK>::__g = _Fn<_Args ...> [with _Fn = stdexec::__detail::__state_type_t; _Args = {exec::__repeat_effect_until::__repeat_effect_until_tag, stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__let::__receiver_with_sched<stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t, asio2exec::__detail::scheduler_t>}; bool _AllOK = true]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:296:9:   required by substitution of ‘template<template<class ...> class _Fn, class ... _Args> using stdexec::__meval = typename stdexec::__i<_Ok<_Args ...> >::__g<template<class ...> class _Fn, _Args ...> [with _Fn = stdexec::__detail::__state_type_t; _Args = {exec::__repeat_effect_until::__repeat_effect_until_tag, stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__let::__receiver_with_sched<stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t, asio2exec::__detail::scheduler_t>}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:346:42:   [ skipping 69 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:758:53:   required by substitution of ‘template<class _Fun, class ... _As> using stdexec::__call_result_t = decltype (__declval<_Fun>()((__declval<_As>)()...)) [with _Fun = stdexec::__detail::__connect_fn<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t>::__impl; _As = {std::integer_sequence<long unsigned int, 0>*, stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, stdexec::__detail::__always<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__basic_sender<stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, main(int, char**)::<lambda(asio::ip::tcp::socket)>::<lambda(asio::ip::tcp::socket&, std::array<char, 1024>&, asio::steady_timer&)>, stdexec::__basic_sender<stdexec::__just::just_t, stdexec::__tup::__tuple<std::integer_sequence<long unsigned int, 0, 1, 2>*, asio::basic_stream_socket<asio::ip::tcp, asio::any_io_executor>, std::array<char, 1024>, asio::basic_waitable_timer<std::chrono::_V2::steady_clock, asio::wait_traits<std::chrono::_V2::steady_clock>, asio::any_io_executor> > > > >, asio2exec::__detail::scheduler_t::__schedule_sender_t}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__concepts.hpp:27:33:   recursively required by substitution of ‘template<class _Cvref, class _Fun> stdexec::__detail::__captures<stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, __always<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__basic_sender<stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, main(int, char**)::<lambda(asio::ip::tcp::socket)>::<lambda(asio::ip::tcp::socket&, std::array<char, 1024>&, asio::steady_timer&)>, stdexec::__basic_sender<stdexec::__just::just_t, stdexec::__tup::__tuple<std::integer_sequence<long unsigned int, 0, 1, 2>*, asio::basic_stream_socket<asio::ip::tcp, asio::any_io_executor>, std::array<char, 1024>, asio::basic_waitable_timer<std::chrono::_V2::steady_clock, asio::wait_traits<std::chrono::_V2::steady_clock>, asio::any_io_executor> > > > >, asio2exec::__detail::scheduler_t::__schedule_sender_t>(stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, __always<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__basic_sender<stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, main(int, char**)::<lambda(asio::ip::tcp::socket)>::<lambda(asio::ip::tcp::socket&, std::array<char, 1024>&, asio::steady_timer&)>, stdexec::__basic_sender<stdexec::__just::just_t, stdexec::__tup::__tuple<std::integer_sequence<long unsigned int, 0, 1, 2>*, asio::basic_stream_socket<asio::ip::tcp, asio::any_io_executor>, std::array<char, 1024>, asio::basic_waitable_timer<std::chrono::_V2::steady_clock, asio::wait_traits<std::chrono::_V2::steady_clock>, asio::any_io_executor> > > > >&&, asio2exec::__detail::scheduler_t::__schedule_sender_t&&)::<lambda(_Cvref, _Fun&&)> mutable [with _Cvref = stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>; _Fun = {stdexec::__detail::__always<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__basic_sender<stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, main(int, char**)::<lambda(asio::ip::tcp::socket)>::<lambda(asio::ip::tcp::socket&, std::array<char, 1024>&, asio::steady_timer&)>, stdexec::__basic_sender<stdexec::__just::just_t, stdexec::__tup::__tuple<std::integer_sequence<long unsigned int, 0, 1, 2>*, asio::basic_stream_socket<asio::ip::tcp, asio::any_io_executor>, std::array<char, 1024>, asio::basic_waitable_timer<std::chrono::_V2::steady_clock, asio::wait_traits<std::chrono::_V2::steady_clock>, asio::any_io_executor> > > > >, asio2exec::__detail::scheduler_t::__schedule_sender_t}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__concepts.hpp:27:33:   required by substitution of ‘template<class _Sender, class _Receiver> stdexec::__detail::<lambda(_Sender&&, _Receiver)> [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:767:36:   required by substitution of ‘template<class _Self, class _Receiver>  requires  __decays_to<_Self, stdexec::__sexpr<_DescriptorFn, <template-parameter-1-2> > > stdexec::__msecond<stdexec::__if_c<__decays_to<_Self, stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon> >, void>, decltype (stdexec::__sexpr_impl<stdexec::__meval<stdexec::__msecond, _Self, stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain> > >::connect(__declval<_Self>(), __declval<_Receiver>()))> stdexec::tag_invoke(const __connect::connect_t&, _Self&&, _Receiver&&) [with _Self = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/../functional.hpp:339:19:   required by substitution of ‘template<class _Sender, class _Receiver>  requires (sender<_Sender, stdexec::__env::empty_env>) && (receiver<_Receiver>) && ((__connectable_with_tag_invoke<_Sender, _Receiver>) || (__connectable_with_co_await<_Sender, _Receiver>) || (__is_debug_env<decltype((__declval()())((__declval<_Receiver>)()))>)) stdexec::__call_result_t<decltype (__select_impl<_Sender, _Receiver>())> stdexec::__connect::connect_t::operator()(_Sender&&, _Receiver&&) const [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__domain.hpp:77:25:   recursively required by substitution of ‘template<class _Tag, class _Sender, class ... _Args>  requires (__has_legacy_c11n<_Tag, _Sender, _Args ...>) || (__has_apply_sender<_Tag, _Sender, _Args ...>) decltype(auto) stdexec::default_domain::apply_sender(_Tag, _Sender&&, _Args&& ...) const [with _Tag = stdexec::__start_detached::start_detached_t; _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Args = {}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__domain.hpp:77:25:   required by substitution of ‘template<class _Domain, class _Tag, class _Sender, class ... _Args>  requires  __has_implementation_for<_Tag, _Domain, _Sender, _Args ...> decltype(auto) stdexec::apply_sender_t::operator()(_Domain, _Tag, _Sender&&, _Args&& ...) const [with _Domain = stdexec::dependent_domain; _Tag = stdexec::__start_detached::start_detached_t; _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Args = {}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__concepts.hpp:27:33:   required by substitution of ‘template<class _Sender>  requires (sender_in<_Sender, stdexec::__env::empty_env>) && (__callable<stdexec::apply_sender_t, decltype((__declval()())((__declval<_Sender>)(), __declval()())), stdexec::__start_detached::start_detached_t, _Sender>) void stdexec::__start_detached::start_detached_t::operator()(_Sender&&) const [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>]’
/root/project/cpp/asio2exec/examples/echo_server.cpp:82:39:   required from here
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:767:36: error: no match for call to ‘(const stdexec::__on::on_t) (exec::__trampoline::__scheduler, stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>&)’
  767 |   using __result_of = decltype(_Fun(__declval<_As>()...));
      |                                ~~~~^~~~~~~~~~~~~~~~~~~~~
/root/project/cpp/asio2exec/stdexec/include/stdexec/execution.hpp:4589:12: note: candidate: ‘template<class _Scheduler, class _Sender>  requires (scheduler<_Scheduler>) && (sender<_Sender, stdexec::__env::empty_env>) auto [requires stdexec::__well_formed_sender<<placeholder>, >] stdexec::__on::on_t::operator()(_Scheduler&&, _Sender&&) const’
 4589 |       auto operator()(_Scheduler&& __sched, _Sender&& __sndr) const -> __well_formed_sender auto {
      |            ^~~~~~~~
/root/project/cpp/asio2exec/stdexec/include/stdexec/execution.hpp:4589:12: note:   template argument deduction/substitution failed:
/root/project/cpp/asio2exec/stdexec/include/stdexec/execution.hpp:4589:12: note: constraints not satisfied
In file included from /root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/../functional.hpp:20,
                 from /root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__env.hpp:24,
                 from /root/project/cpp/asio2exec/stdexec/include/stdexec/execution.hpp:23:
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/../concepts.hpp: In substitution of ‘template<class _Scheduler, class _Sender>  requires (scheduler<_Scheduler>) && (sender<_Sender, stdexec::__env::empty_env>) auto [requires stdexec::__well_formed_sender<<placeholder>, >] stdexec::__on::on_t::operator()(_Scheduler&&, _Sender&&) const [with _Scheduler = exec::__trampoline::__scheduler; _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>&]’:
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:767:36:   required by substitution of ‘template<const auto& _Fun, class ... _As> using stdexec::__result_of = decltype (_Fun((__declval<_As>)()...)) [with const auto& _Fun = stdexec::on; _As = {exec::__trampoline::__scheduler, stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>&}]’
/root/project/cpp/asio2exec/stdexec/include/exec/repeat_effect_until.hpp:69:13:   required from ‘struct exec::__repeat_effect_until::__repeat_effect_state<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__let::__receiver_with_sched<stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t, asio2exec::__detail::scheduler_t> >’
/root/project/cpp/asio2exec/stdexec/include/exec/repeat_effect_until.hpp:171:79:   required from ‘exec::__repeat_effect_until::__repeat_effect_until_impl::<lambda(_Sender&&, _Receiver&)> [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__let::__receiver_with_sched<stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t, asio2exec::__detail::scheduler_t>]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:767:36:   required by substitution of ‘template<class _Tag, class _Sexpr, class _Receiver> using stdexec::__detail::__state_type_t = stdexec::__decay_t<decltype (stdexec::__sexpr_impl<_Tag>::get_state(__declval<_Sexpr>(), __declval<_Receiver&>()))> [with _Tag = exec::__repeat_effect_until::__repeat_effect_until_tag; _Sexpr = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__let::__receiver_with_sched<stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t, asio2exec::__detail::scheduler_t>]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:306:11:   required by substitution of ‘template<bool _AllOK> template<template<template<class ...> class _Fn, class ... _Args> template<bool _AllOK> template<class ...> class _Fn, class ... _Args> using stdexec::__i<_AllOK>::__g = _Fn<_Args ...> [with _Fn = stdexec::__detail::__state_type_t; _Args = {exec::__repeat_effect_until::__repeat_effect_until_tag, stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__let::__receiver_with_sched<stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t, asio2exec::__detail::scheduler_t>}; bool _AllOK = true]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:296:9:   [ skipping 70 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:758:53:   required by substitution of ‘template<class _Fun, class ... _As> using stdexec::__call_result_t = decltype (__declval<_Fun>()((__declval<_As>)()...)) [with _Fun = stdexec::__detail::__connect_fn<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t>::__impl; _As = {std::integer_sequence<long unsigned int, 0>*, stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, stdexec::__detail::__always<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__basic_sender<stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, main(int, char**)::<lambda(asio::ip::tcp::socket)>::<lambda(asio::ip::tcp::socket&, std::array<char, 1024>&, asio::steady_timer&)>, stdexec::__basic_sender<stdexec::__just::just_t, stdexec::__tup::__tuple<std::integer_sequence<long unsigned int, 0, 1, 2>*, asio::basic_stream_socket<asio::ip::tcp, asio::any_io_executor>, std::array<char, 1024>, asio::basic_waitable_timer<std::chrono::_V2::steady_clock, asio::wait_traits<std::chrono::_V2::steady_clock>, asio::any_io_executor> > > > >, asio2exec::__detail::scheduler_t::__schedule_sender_t}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__concepts.hpp:27:33:   recursively required by substitution of ‘template<class _Cvref, class _Fun> stdexec::__detail::__captures<stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, __always<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__basic_sender<stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, main(int, char**)::<lambda(asio::ip::tcp::socket)>::<lambda(asio::ip::tcp::socket&, std::array<char, 1024>&, asio::steady_timer&)>, stdexec::__basic_sender<stdexec::__just::just_t, stdexec::__tup::__tuple<std::integer_sequence<long unsigned int, 0, 1, 2>*, asio::basic_stream_socket<asio::ip::tcp, asio::any_io_executor>, std::array<char, 1024>, asio::basic_waitable_timer<std::chrono::_V2::steady_clock, asio::wait_traits<std::chrono::_V2::steady_clock>, asio::any_io_executor> > > > >, asio2exec::__detail::scheduler_t::__schedule_sender_t>(stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, __always<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__basic_sender<stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, main(int, char**)::<lambda(asio::ip::tcp::socket)>::<lambda(asio::ip::tcp::socket&, std::array<char, 1024>&, asio::steady_timer&)>, stdexec::__basic_sender<stdexec::__just::just_t, stdexec::__tup::__tuple<std::integer_sequence<long unsigned int, 0, 1, 2>*, asio::basic_stream_socket<asio::ip::tcp, asio::any_io_executor>, std::array<char, 1024>, asio::basic_waitable_timer<std::chrono::_V2::steady_clock, asio::wait_traits<std::chrono::_V2::steady_clock>, asio::any_io_executor> > > > >&&, asio2exec::__detail::scheduler_t::__schedule_sender_t&&)::<lambda(_Cvref, _Fun&&)> mutable [with _Cvref = stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>; _Fun = {stdexec::__detail::__always<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__basic_sender<stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, main(int, char**)::<lambda(asio::ip::tcp::socket)>::<lambda(asio::ip::tcp::socket&, std::array<char, 1024>&, asio::steady_timer&)>, stdexec::__basic_sender<stdexec::__just::just_t, stdexec::__tup::__tuple<std::integer_sequence<long unsigned int, 0, 1, 2>*, asio::basic_stream_socket<asio::ip::tcp, asio::any_io_executor>, std::array<char, 1024>, asio::basic_waitable_timer<std::chrono::_V2::steady_clock, asio::wait_traits<std::chrono::_V2::steady_clock>, asio::any_io_executor> > > > >, asio2exec::__detail::scheduler_t::__schedule_sender_t}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__concepts.hpp:27:33:   required by substitution of ‘template<class _Sender, class _Receiver> stdexec::__detail::<lambda(_Sender&&, _Receiver)> [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:767:36:   required by substitution of ‘template<class _Self, class _Receiver>  requires  __decays_to<_Self, stdexec::__sexpr<_DescriptorFn, <template-parameter-1-2> > > stdexec::__msecond<stdexec::__if_c<__decays_to<_Self, stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon> >, void>, decltype (stdexec::__sexpr_impl<stdexec::__meval<stdexec::__msecond, _Self, stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain> > >::connect(__declval<_Self>(), __declval<_Receiver>()))> stdexec::tag_invoke(const __connect::connect_t&, _Self&&, _Receiver&&) [with _Self = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/../functional.hpp:339:19:   required by substitution of ‘template<class _Sender, class _Receiver>  requires (sender<_Sender, stdexec::__env::empty_env>) && (receiver<_Receiver>) && ((__connectable_with_tag_invoke<_Sender, _Receiver>) || (__connectable_with_co_await<_Sender, _Receiver>) || (__is_debug_env<decltype((__declval()())((__declval<_Receiver>)()))>)) stdexec::__call_result_t<decltype (__select_impl<_Sender, _Receiver>())> stdexec::__connect::connect_t::operator()(_Sender&&, _Receiver&&) const [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__domain.hpp:77:25:   recursively required by substitution of ‘template<class _Tag, class _Sender, class ... _Args>  requires (__has_legacy_c11n<_Tag, _Sender, _Args ...>) || (__has_apply_sender<_Tag, _Sender, _Args ...>) decltype(auto) stdexec::default_domain::apply_sender(_Tag, _Sender&&, _Args&& ...) const [with _Tag = stdexec::__start_detached::start_detached_t; _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Args = {}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__domain.hpp:77:25:   required by substitution of ‘template<class _Domain, class _Tag, class _Sender, class ... _Args>  requires  __has_implementation_for<_Tag, _Domain, _Sender, _Args ...> decltype(auto) stdexec::apply_sender_t::operator()(_Domain, _Tag, _Sender&&, _Args&& ...) const [with _Domain = stdexec::dependent_domain; _Tag = stdexec::__start_detached::start_detached_t; _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Args = {}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__concepts.hpp:27:33:   required by substitution of ‘template<class _Sender>  requires (sender_in<_Sender, stdexec::__env::empty_env>) && (__callable<stdexec::apply_sender_t, decltype((__declval()())((__declval<_Sender>)(), __declval()())), stdexec::__start_detached::start_detached_t, _Sender>) void stdexec::__start_detached::start_detached_t::operator()(_Sender&&) const [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>]’
/root/project/cpp/asio2exec/examples/echo_server.cpp:82:39:   required from here
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/../concepts.hpp:106:11:   required for the satisfaction of ‘constructible_from<typename decltype (__mdecay<_Ty>)::__f<_Ty>, _Sender>’ [with _Sender = stdexec::__sexpr<{}, stdexec::<unnamed>::__anon>&]
/root/project/cpp/asio2exec/stdexec/include/stdexec/execution.hpp:787:11:   required for the satisfaction of ‘sender<_Sender, stdexec::__env::empty_env>’ [with _Sender = stdexec::__sexpr<{}, stdexec::<unnamed>::__anon>&]
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/../concepts.hpp:108:5: note:   ‘stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>’ is not constructible from ‘‘reference_type’ not supported by dump_expr<expression error>’
  108 |     __is_constructible(_Ty, _As...);
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp: In instantiation of ‘struct exec::__repeat_effect_until::__repeat_effect_state<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__let::__receiver_with_sched<stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t, asio2exec::__detail::scheduler_t> >’:
/root/project/cpp/asio2exec/stdexec/include/exec/repeat_effect_until.hpp:171:79:   required from ‘exec::__repeat_effect_until::__repeat_effect_until_impl::<lambda(_Sender&&, _Receiver&)> [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__let::__receiver_with_sched<stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t, asio2exec::__detail::scheduler_t>]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:767:36:   required by substitution of ‘template<class _Tag, class _Sexpr, class _Receiver> using stdexec::__detail::__state_type_t = stdexec::__decay_t<decltype (stdexec::__sexpr_impl<_Tag>::get_state(__declval<_Sexpr>(), __declval<_Receiver&>()))> [with _Tag = exec::__repeat_effect_until::__repeat_effect_until_tag; _Sexpr = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__let::__receiver_with_sched<stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t, asio2exec::__detail::scheduler_t>]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:306:11:   required by substitution of ‘template<bool _AllOK> template<template<template<class ...> class _Fn, class ... _Args> template<bool _AllOK> template<class ...> class _Fn, class ... _Args> using stdexec::__i<_AllOK>::__g = _Fn<_Args ...> [with _Fn = stdexec::__detail::__state_type_t; _Args = {exec::__repeat_effect_until::__repeat_effect_until_tag, stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__let::__receiver_with_sched<stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t, asio2exec::__detail::scheduler_t>}; bool _AllOK = true]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:296:9:   required by substitution of ‘template<template<class ...> class _Fn, class ... _Args> using stdexec::__meval = typename stdexec::__i<_Ok<_Args ...> >::__g<template<class ...> class _Fn, _Args ...> [with _Fn = stdexec::__detail::__state_type_t; _Args = {exec::__repeat_effect_until::__repeat_effect_until_tag, stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__let::__receiver_with_sched<stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t, asio2exec::__detail::scheduler_t>}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:346:42:   required by substitution of ‘template<class _Sender, class _Receiver> stdexec::__detail::<lambda(_Sender&&, _Receiver)> [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__let::__receiver_with_sched<stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t, asio2exec::__detail::scheduler_t>]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:767:36:   [ skipping 68 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:758:53:   required by substitution of ‘template<class _Fun, class ... _As> using stdexec::__call_result_t = decltype (__declval<_Fun>()((__declval<_As>)()...)) [with _Fun = stdexec::__detail::__connect_fn<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t>::__impl; _As = {std::integer_sequence<long unsigned int, 0>*, stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, stdexec::__detail::__always<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__basic_sender<stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, main(int, char**)::<lambda(asio::ip::tcp::socket)>::<lambda(asio::ip::tcp::socket&, std::array<char, 1024>&, asio::steady_timer&)>, stdexec::__basic_sender<stdexec::__just::just_t, stdexec::__tup::__tuple<std::integer_sequence<long unsigned int, 0, 1, 2>*, asio::basic_stream_socket<asio::ip::tcp, asio::any_io_executor>, std::array<char, 1024>, asio::basic_waitable_timer<std::chrono::_V2::steady_clock, asio::wait_traits<std::chrono::_V2::steady_clock>, asio::any_io_executor> > > > >, asio2exec::__detail::scheduler_t::__schedule_sender_t}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__concepts.hpp:27:33:   recursively required by substitution of ‘template<class _Cvref, class _Fun> stdexec::__detail::__captures<stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, __always<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__basic_sender<stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, main(int, char**)::<lambda(asio::ip::tcp::socket)>::<lambda(asio::ip::tcp::socket&, std::array<char, 1024>&, asio::steady_timer&)>, stdexec::__basic_sender<stdexec::__just::just_t, stdexec::__tup::__tuple<std::integer_sequence<long unsigned int, 0, 1, 2>*, asio::basic_stream_socket<asio::ip::tcp, asio::any_io_executor>, std::array<char, 1024>, asio::basic_waitable_timer<std::chrono::_V2::steady_clock, asio::wait_traits<std::chrono::_V2::steady_clock>, asio::any_io_executor> > > > >, asio2exec::__detail::scheduler_t::__schedule_sender_t>(stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, __always<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__basic_sender<stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, main(int, char**)::<lambda(asio::ip::tcp::socket)>::<lambda(asio::ip::tcp::socket&, std::array<char, 1024>&, asio::steady_timer&)>, stdexec::__basic_sender<stdexec::__just::just_t, stdexec::__tup::__tuple<std::integer_sequence<long unsigned int, 0, 1, 2>*, asio::basic_stream_socket<asio::ip::tcp, asio::any_io_executor>, std::array<char, 1024>, asio::basic_waitable_timer<std::chrono::_V2::steady_clock, asio::wait_traits<std::chrono::_V2::steady_clock>, asio::any_io_executor> > > > >&&, asio2exec::__detail::scheduler_t::__schedule_sender_t&&)::<lambda(_Cvref, _Fun&&)> mutable [with _Cvref = stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>; _Fun = {stdexec::__detail::__always<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__basic_sender<stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, main(int, char**)::<lambda(asio::ip::tcp::socket)>::<lambda(asio::ip::tcp::socket&, std::array<char, 1024>&, asio::steady_timer&)>, stdexec::__basic_sender<stdexec::__just::just_t, stdexec::__tup::__tuple<std::integer_sequence<long unsigned int, 0, 1, 2>*, asio::basic_stream_socket<asio::ip::tcp, asio::any_io_executor>, std::array<char, 1024>, asio::basic_waitable_timer<std::chrono::_V2::steady_clock, asio::wait_traits<std::chrono::_V2::steady_clock>, asio::any_io_executor> > > > >, asio2exec::__detail::scheduler_t::__schedule_sender_t}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__concepts.hpp:27:33:   required by substitution of ‘template<class _Sender, class _Receiver> stdexec::__detail::<lambda(_Sender&&, _Receiver)> [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:767:36:   required by substitution of ‘template<class _Self, class _Receiver>  requires  __decays_to<_Self, stdexec::__sexpr<_DescriptorFn, <template-parameter-1-2> > > stdexec::__msecond<stdexec::__if_c<__decays_to<_Self, stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon> >, void>, decltype (stdexec::__sexpr_impl<stdexec::__meval<stdexec::__msecond, _Self, stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain> > >::connect(__declval<_Self>(), __declval<_Receiver>()))> stdexec::tag_invoke(const __connect::connect_t&, _Self&&, _Receiver&&) [with _Self = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/../functional.hpp:339:19:   required by substitution of ‘template<class _Sender, class _Receiver>  requires (sender<_Sender, stdexec::__env::empty_env>) && (receiver<_Receiver>) && ((__connectable_with_tag_invoke<_Sender, _Receiver>) || (__connectable_with_co_await<_Sender, _Receiver>) || (__is_debug_env<decltype((__declval()())((__declval<_Receiver>)()))>)) stdexec::__call_result_t<decltype (__select_impl<_Sender, _Receiver>())> stdexec::__connect::connect_t::operator()(_Sender&&, _Receiver&&) const [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__domain.hpp:77:25:   recursively required by substitution of ‘template<class _Tag, class _Sender, class ... _Args>  requires (__has_legacy_c11n<_Tag, _Sender, _Args ...>) || (__has_apply_sender<_Tag, _Sender, _Args ...>) decltype(auto) stdexec::default_domain::apply_sender(_Tag, _Sender&&, _Args&& ...) const [with _Tag = stdexec::__start_detached::start_detached_t; _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Args = {}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__domain.hpp:77:25:   required by substitution of ‘template<class _Domain, class _Tag, class _Sender, class ... _Args>  requires  __has_implementation_for<_Tag, _Domain, _Sender, _Args ...> decltype(auto) stdexec::apply_sender_t::operator()(_Domain, _Tag, _Sender&&, _Args&& ...) const [with _Domain = stdexec::dependent_domain; _Tag = stdexec::__start_detached::start_detached_t; _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Args = {}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__concepts.hpp:27:33:   required by substitution of ‘template<class _Sender>  requires (sender_in<_Sender, stdexec::__env::empty_env>) && (__callable<stdexec::apply_sender_t, decltype((__declval()())((__declval<_Sender>)(), __declval()())), stdexec::__start_detached::start_detached_t, _Sender>) void stdexec::__start_detached::start_detached_t::operator()(_Sender&&) const [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>]’
/root/project/cpp/asio2exec/examples/echo_server.cpp:82:39:   required from here
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:767:36: error: no match for call to ‘(const stdexec::__on::on_t) (exec::__trampoline::__scheduler, stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>&)’
  767 |   using __result_of = decltype(_Fun(__declval<_As>()...));
      |                                ~~~~^~~~~~~~~~~~~~~~~~~~~
/root/project/cpp/asio2exec/stdexec/include/stdexec/execution.hpp:4589:12: note: candidate: ‘template<class _Scheduler, class _Sender>  requires (scheduler<_Scheduler>) && (sender<_Sender, stdexec::__env::empty_env>) auto [requires stdexec::__well_formed_sender<<placeholder>, >] stdexec::__on::on_t::operator()(_Scheduler&&, _Sender&&) const’
 4589 |       auto operator()(_Scheduler&& __sched, _Sender&& __sndr) const -> __well_formed_sender auto {
      |            ^~~~~~~~
/root/project/cpp/asio2exec/stdexec/include/stdexec/execution.hpp:4589:12: note:   template argument deduction/substitution failed:
/root/project/cpp/asio2exec/stdexec/include/stdexec/execution.hpp:4589:12: note: constraints not satisfied
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/../concepts.hpp: In substitution of ‘template<class _Scheduler, class _Sender>  requires (scheduler<_Scheduler>) && (sender<_Sender, stdexec::__env::empty_env>) auto [requires stdexec::__well_formed_sender<<placeholder>, >] stdexec::__on::on_t::operator()(_Scheduler&&, _Sender&&) const [with _Scheduler = exec::__trampoline::__scheduler; _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>&]’:
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:767:36:   required from ‘struct exec::__repeat_effect_until::__repeat_effect_state<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__let::__receiver_with_sched<stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t, asio2exec::__detail::scheduler_t> >’
/root/project/cpp/asio2exec/stdexec/include/exec/repeat_effect_until.hpp:171:79:   required from ‘exec::__repeat_effect_until::__repeat_effect_until_impl::<lambda(_Sender&&, _Receiver&)> [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__let::__receiver_with_sched<stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t, asio2exec::__detail::scheduler_t>]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:767:36:   required by substitution of ‘template<class _Tag, class _Sexpr, class _Receiver> using stdexec::__detail::__state_type_t = stdexec::__decay_t<decltype (stdexec::__sexpr_impl<_Tag>::get_state(__declval<_Sexpr>(), __declval<_Receiver&>()))> [with _Tag = exec::__repeat_effect_until::__repeat_effect_until_tag; _Sexpr = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__let::__receiver_with_sched<stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t, asio2exec::__detail::scheduler_t>]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:306:11:   required by substitution of ‘template<bool _AllOK> template<template<template<class ...> class _Fn, class ... _Args> template<bool _AllOK> template<class ...> class _Fn, class ... _Args> using stdexec::__i<_AllOK>::__g = _Fn<_Args ...> [with _Fn = stdexec::__detail::__state_type_t; _Args = {exec::__repeat_effect_until::__repeat_effect_until_tag, stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__let::__receiver_with_sched<stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t, asio2exec::__detail::scheduler_t>}; bool _AllOK = true]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:296:9:   required by substitution of ‘template<template<class ...> class _Fn, class ... _Args> using stdexec::__meval = typename stdexec::__i<_Ok<_Args ...> >::__g<template<class ...> class _Fn, _Args ...> [with _Fn = stdexec::__detail::__state_type_t; _Args = {exec::__repeat_effect_until::__repeat_effect_until_tag, stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__let::__receiver_with_sched<stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t, asio2exec::__detail::scheduler_t>}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:346:42:   [ skipping 69 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:758:53:   required by substitution of ‘template<class _Fun, class ... _As> using stdexec::__call_result_t = decltype (__declval<_Fun>()((__declval<_As>)()...)) [with _Fun = stdexec::__detail::__connect_fn<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t>::__impl; _As = {std::integer_sequence<long unsigned int, 0>*, stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, stdexec::__detail::__always<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__basic_sender<stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, main(int, char**)::<lambda(asio::ip::tcp::socket)>::<lambda(asio::ip::tcp::socket&, std::array<char, 1024>&, asio::steady_timer&)>, stdexec::__basic_sender<stdexec::__just::just_t, stdexec::__tup::__tuple<std::integer_sequence<long unsigned int, 0, 1, 2>*, asio::basic_stream_socket<asio::ip::tcp, asio::any_io_executor>, std::array<char, 1024>, asio::basic_waitable_timer<std::chrono::_V2::steady_clock, asio::wait_traits<std::chrono::_V2::steady_clock>, asio::any_io_executor> > > > >, asio2exec::__detail::scheduler_t::__schedule_sender_t}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__concepts.hpp:27:33:   recursively required by substitution of ‘template<class _Cvref, class _Fun> stdexec::__detail::__captures<stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, __always<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__basic_sender<stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, main(int, char**)::<lambda(asio::ip::tcp::socket)>::<lambda(asio::ip::tcp::socket&, std::array<char, 1024>&, asio::steady_timer&)>, stdexec::__basic_sender<stdexec::__just::just_t, stdexec::__tup::__tuple<std::integer_sequence<long unsigned int, 0, 1, 2>*, asio::basic_stream_socket<asio::ip::tcp, asio::any_io_executor>, std::array<char, 1024>, asio::basic_waitable_timer<std::chrono::_V2::steady_clock, asio::wait_traits<std::chrono::_V2::steady_clock>, asio::any_io_executor> > > > >, asio2exec::__detail::scheduler_t::__schedule_sender_t>(stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, __always<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__basic_sender<stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, main(int, char**)::<lambda(asio::ip::tcp::socket)>::<lambda(asio::ip::tcp::socket&, std::array<char, 1024>&, asio::steady_timer&)>, stdexec::__basic_sender<stdexec::__just::just_t, stdexec::__tup::__tuple<std::integer_sequence<long unsigned int, 0, 1, 2>*, asio::basic_stream_socket<asio::ip::tcp, asio::any_io_executor>, std::array<char, 1024>, asio::basic_waitable_timer<std::chrono::_V2::steady_clock, asio::wait_traits<std::chrono::_V2::steady_clock>, asio::any_io_executor> > > > >&&, asio2exec::__detail::scheduler_t::__schedule_sender_t&&)::<lambda(_Cvref, _Fun&&)> mutable [with _Cvref = stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>; _Fun = {stdexec::__detail::__always<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__basic_sender<stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, main(int, char**)::<lambda(asio::ip::tcp::socket)>::<lambda(asio::ip::tcp::socket&, std::array<char, 1024>&, asio::steady_timer&)>, stdexec::__basic_sender<stdexec::__just::just_t, stdexec::__tup::__tuple<std::integer_sequence<long unsigned int, 0, 1, 2>*, asio::basic_stream_socket<asio::ip::tcp, asio::any_io_executor>, std::array<char, 1024>, asio::basic_waitable_timer<std::chrono::_V2::steady_clock, asio::wait_traits<std::chrono::_V2::steady_clock>, asio::any_io_executor> > > > >, asio2exec::__detail::scheduler_t::__schedule_sender_t}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__concepts.hpp:27:33:   required by substitution of ‘template<class _Sender, class _Receiver> stdexec::__detail::<lambda(_Sender&&, _Receiver)> [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:767:36:   required by substitution of ‘template<class _Self, class _Receiver>  requires  __decays_to<_Self, stdexec::__sexpr<_DescriptorFn, <template-parameter-1-2> > > stdexec::__msecond<stdexec::__if_c<__decays_to<_Self, stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon> >, void>, decltype (stdexec::__sexpr_impl<stdexec::__meval<stdexec::__msecond, _Self, stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain> > >::connect(__declval<_Self>(), __declval<_Receiver>()))> stdexec::tag_invoke(const __connect::connect_t&, _Self&&, _Receiver&&) [with _Self = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/../functional.hpp:339:19:   required by substitution of ‘template<class _Sender, class _Receiver>  requires (sender<_Sender, stdexec::__env::empty_env>) && (receiver<_Receiver>) && ((__connectable_with_tag_invoke<_Sender, _Receiver>) || (__connectable_with_co_await<_Sender, _Receiver>) || (__is_debug_env<decltype((__declval()())((__declval<_Receiver>)()))>)) stdexec::__call_result_t<decltype (__select_impl<_Sender, _Receiver>())> stdexec::__connect::connect_t::operator()(_Sender&&, _Receiver&&) const [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__domain.hpp:77:25:   recursively required by substitution of ‘template<class _Tag, class _Sender, class ... _Args>  requires (__has_legacy_c11n<_Tag, _Sender, _Args ...>) || (__has_apply_sender<_Tag, _Sender, _Args ...>) decltype(auto) stdexec::default_domain::apply_sender(_Tag, _Sender&&, _Args&& ...) const [with _Tag = stdexec::__start_detached::start_detached_t; _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Args = {}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__domain.hpp:77:25:   required by substitution of ‘template<class _Domain, class _Tag, class _Sender, class ... _Args>  requires  __has_implementation_for<_Tag, _Domain, _Sender, _Args ...> decltype(auto) stdexec::apply_sender_t::operator()(_Domain, _Tag, _Sender&&, _Args&& ...) const [with _Domain = stdexec::dependent_domain; _Tag = stdexec::__start_detached::start_detached_t; _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Args = {}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__concepts.hpp:27:33:   required by substitution of ‘template<class _Sender>  requires (sender_in<_Sender, stdexec::__env::empty_env>) && (__callable<stdexec::apply_sender_t, decltype((__declval()())((__declval<_Sender>)(), __declval()())), stdexec::__start_detached::start_detached_t, _Sender>) void stdexec::__start_detached::start_detached_t::operator()(_Sender&&) const [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>]’
/root/project/cpp/asio2exec/examples/echo_server.cpp:82:39:   required from here
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/../concepts.hpp:106:11:   required for the satisfaction of ‘constructible_from<typename decltype (__mdecay<_Ty>)::__f<_Ty>, _Sender>’ [with _Sender = stdexec::__sexpr<{}, stdexec::<unnamed>::__anon>&]
/root/project/cpp/asio2exec/stdexec/include/stdexec/execution.hpp:787:11:   required for the satisfaction of ‘sender<_Sender, stdexec::__env::empty_env>’ [with _Sender = stdexec::__sexpr<{}, stdexec::<unnamed>::__anon>&]
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/../concepts.hpp:108:5: note:   ‘stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>’ is not constructible from ‘‘reference_type’ not supported by dump_expr<expression error>’
  108 |     __is_constructible(_Ty, _As...);
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp: In instantiation of ‘struct exec::__repeat_effect_until::__repeat_effect_state<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__let::__receiver_with_sched<stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t, asio2exec::__detail::scheduler_t> >’:
/root/project/cpp/asio2exec/stdexec/include/exec/repeat_effect_until.hpp:171:79:   required from ‘exec::__repeat_effect_until::__repeat_effect_until_impl::<lambda(_Sender&&, _Receiver&)> [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__let::__receiver_with_sched<stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t, asio2exec::__detail::scheduler_t>]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:767:36:   required by substitution of ‘template<class _Tag, class _Sexpr, class _Receiver> using stdexec::__detail::__state_type_t = stdexec::__decay_t<decltype (stdexec::__sexpr_impl<_Tag>::get_state(__declval<_Sexpr>(), __declval<_Receiver&>()))> [with _Tag = exec::__repeat_effect_until::__repeat_effect_until_tag; _Sexpr = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__let::__receiver_with_sched<stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t, asio2exec::__detail::scheduler_t>]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:306:11:   required by substitution of ‘template<bool _AllOK> template<template<template<class ...> class _Fn, class ... _Args> template<bool _AllOK> template<class ...> class _Fn, class ... _Args> using stdexec::__i<_AllOK>::__g = _Fn<_Args ...> [with _Fn = stdexec::__detail::__state_type_t; _Args = {exec::__repeat_effect_until::__repeat_effect_until_tag, stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__let::__receiver_with_sched<stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t, asio2exec::__detail::scheduler_t>}; bool _AllOK = true]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:296:9:   required by substitution of ‘template<template<class ...> class _Fn, class ... _Args> using stdexec::__meval = typename stdexec::__i<_Ok<_Args ...> >::__g<template<class ...> class _Fn, _Args ...> [with _Fn = stdexec::__detail::__state_type_t; _Args = {exec::__repeat_effect_until::__repeat_effect_until_tag, stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__let::__receiver_with_sched<stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t, asio2exec::__detail::scheduler_t>}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:346:42:   required by substitution of ‘template<class _Sender, class _Receiver> stdexec::__detail::<lambda(_Sender&&, _Receiver)> [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__let::__receiver_with_sched<stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t, asio2exec::__detail::scheduler_t>]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:767:36:   [ skipping 68 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:758:53:   required by substitution of ‘template<class _Fun, class ... _As> using stdexec::__call_result_t = decltype (__declval<_Fun>()((__declval<_As>)()...)) [with _Fun = stdexec::__detail::__connect_fn<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t>::__impl; _As = {std::integer_sequence<long unsigned int, 0>*, stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, stdexec::__detail::__always<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__basic_sender<stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, main(int, char**)::<lambda(asio::ip::tcp::socket)>::<lambda(asio::ip::tcp::socket&, std::array<char, 1024>&, asio::steady_timer&)>, stdexec::__basic_sender<stdexec::__just::just_t, stdexec::__tup::__tuple<std::integer_sequence<long unsigned int, 0, 1, 2>*, asio::basic_stream_socket<asio::ip::tcp, asio::any_io_executor>, std::array<char, 1024>, asio::basic_waitable_timer<std::chrono::_V2::steady_clock, asio::wait_traits<std::chrono::_V2::steady_clock>, asio::any_io_executor> > > > >, asio2exec::__detail::scheduler_t::__schedule_sender_t}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__concepts.hpp:27:33:   recursively required by substitution of ‘template<class _Cvref, class _Fun> stdexec::__detail::__captures<stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, __always<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__basic_sender<stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, main(int, char**)::<lambda(asio::ip::tcp::socket)>::<lambda(asio::ip::tcp::socket&, std::array<char, 1024>&, asio::steady_timer&)>, stdexec::__basic_sender<stdexec::__just::just_t, stdexec::__tup::__tuple<std::integer_sequence<long unsigned int, 0, 1, 2>*, asio::basic_stream_socket<asio::ip::tcp, asio::any_io_executor>, std::array<char, 1024>, asio::basic_waitable_timer<std::chrono::_V2::steady_clock, asio::wait_traits<std::chrono::_V2::steady_clock>, asio::any_io_executor> > > > >, asio2exec::__detail::scheduler_t::__schedule_sender_t>(stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, __always<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__basic_sender<stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, main(int, char**)::<lambda(asio::ip::tcp::socket)>::<lambda(asio::ip::tcp::socket&, std::array<char, 1024>&, asio::steady_timer&)>, stdexec::__basic_sender<stdexec::__just::just_t, stdexec::__tup::__tuple<std::integer_sequence<long unsigned int, 0, 1, 2>*, asio::basic_stream_socket<asio::ip::tcp, asio::any_io_executor>, std::array<char, 1024>, asio::basic_waitable_timer<std::chrono::_V2::steady_clock, asio::wait_traits<std::chrono::_V2::steady_clock>, asio::any_io_executor> > > > >&&, asio2exec::__detail::scheduler_t::__schedule_sender_t&&)::<lambda(_Cvref, _Fun&&)> mutable [with _Cvref = stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>; _Fun = {stdexec::__detail::__always<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__basic_sender<stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, main(int, char**)::<lambda(asio::ip::tcp::socket)>::<lambda(asio::ip::tcp::socket&, std::array<char, 1024>&, asio::steady_timer&)>, stdexec::__basic_sender<stdexec::__just::just_t, stdexec::__tup::__tuple<std::integer_sequence<long unsigned int, 0, 1, 2>*, asio::basic_stream_socket<asio::ip::tcp, asio::any_io_executor>, std::array<char, 1024>, asio::basic_waitable_timer<std::chrono::_V2::steady_clock, asio::wait_traits<std::chrono::_V2::steady_clock>, asio::any_io_executor> > > > >, asio2exec::__detail::scheduler_t::__schedule_sender_t}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__concepts.hpp:27:33:   required by substitution of ‘template<class _Sender, class _Receiver> stdexec::__detail::<lambda(_Sender&&, _Receiver)> [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:767:36:   required by substitution of ‘template<class _Self, class _Receiver>  requires  __decays_to<_Self, stdexec::__sexpr<_DescriptorFn, <template-parameter-1-2> > > stdexec::__msecond<stdexec::__if_c<__decays_to<_Self, stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon> >, void>, decltype (stdexec::__sexpr_impl<stdexec::__meval<stdexec::__msecond, _Self, stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain> > >::connect(__declval<_Self>(), __declval<_Receiver>()))> stdexec::tag_invoke(const __connect::connect_t&, _Self&&, _Receiver&&) [with _Self = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/../functional.hpp:339:19:   required by substitution of ‘template<class _Sender, class _Receiver>  requires (sender<_Sender, stdexec::__env::empty_env>) && (receiver<_Receiver>) && ((__connectable_with_tag_invoke<_Sender, _Receiver>) || (__connectable_with_co_await<_Sender, _Receiver>) || (__is_debug_env<decltype((__declval()())((__declval<_Receiver>)()))>)) stdexec::__call_result_t<decltype (__select_impl<_Sender, _Receiver>())> stdexec::__connect::connect_t::operator()(_Sender&&, _Receiver&&) const [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__domain.hpp:77:25:   recursively required by substitution of ‘template<class _Tag, class _Sender, class ... _Args>  requires (__has_legacy_c11n<_Tag, _Sender, _Args ...>) || (__has_apply_sender<_Tag, _Sender, _Args ...>) decltype(auto) stdexec::default_domain::apply_sender(_Tag, _Sender&&, _Args&& ...) const [with _Tag = stdexec::__start_detached::start_detached_t; _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Args = {}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__domain.hpp:77:25:   required by substitution of ‘template<class _Domain, class _Tag, class _Sender, class ... _Args>  requires  __has_implementation_for<_Tag, _Domain, _Sender, _Args ...> decltype(auto) stdexec::apply_sender_t::operator()(_Domain, _Tag, _Sender&&, _Args&& ...) const [with _Domain = stdexec::dependent_domain; _Tag = stdexec::__start_detached::start_detached_t; _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Args = {}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__concepts.hpp:27:33:   required by substitution of ‘template<class _Sender>  requires (sender_in<_Sender, stdexec::__env::empty_env>) && (__callable<stdexec::apply_sender_t, decltype((__declval()())((__declval<_Sender>)(), __declval()())), stdexec::__start_detached::start_detached_t, _Sender>) void stdexec::__start_detached::start_detached_t::operator()(_Sender&&) const [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>]’
/root/project/cpp/asio2exec/examples/echo_server.cpp:82:39:   required from here
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:767:36: error: no match for call to ‘(const stdexec::__on::on_t) (exec::__trampoline::__scheduler, stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>&)’
  767 |   using __result_of = decltype(_Fun(__declval<_As>()...));
      |                                ~~~~^~~~~~~~~~~~~~~~~~~~~
/root/project/cpp/asio2exec/stdexec/include/stdexec/execution.hpp:4589:12: note: candidate: ‘template<class _Scheduler, class _Sender>  requires (scheduler<_Scheduler>) && (sender<_Sender, stdexec::__env::empty_env>) auto [requires stdexec::__well_formed_sender<<placeholder>, >] stdexec::__on::on_t::operator()(_Scheduler&&, _Sender&&) const’
 4589 |       auto operator()(_Scheduler&& __sched, _Sender&& __sndr) const -> __well_formed_sender auto {
      |            ^~~~~~~~
/root/project/cpp/asio2exec/stdexec/include/stdexec/execution.hpp:4589:12: note:   template argument deduction/substitution failed:
/root/project/cpp/asio2exec/stdexec/include/stdexec/execution.hpp:4589:12: note: constraints not satisfied
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/../concepts.hpp: In substitution of ‘template<class _Scheduler, class _Sender>  requires (scheduler<_Scheduler>) && (sender<_Sender, stdexec::__env::empty_env>) auto [requires stdexec::__well_formed_sender<<placeholder>, >] stdexec::__on::on_t::operator()(_Scheduler&&, _Sender&&) const [with _Scheduler = exec::__trampoline::__scheduler; _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>&]’:
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:767:36:   required from ‘struct exec::__repeat_effect_until::__repeat_effect_state<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__let::__receiver_with_sched<stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t, asio2exec::__detail::scheduler_t> >’
/root/project/cpp/asio2exec/stdexec/include/exec/repeat_effect_until.hpp:171:79:   required from ‘exec::__repeat_effect_until::__repeat_effect_until_impl::<lambda(_Sender&&, _Receiver&)> [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__let::__receiver_with_sched<stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t, asio2exec::__detail::scheduler_t>]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:767:36:   required by substitution of ‘template<class _Tag, class _Sexpr, class _Receiver> using stdexec::__detail::__state_type_t = stdexec::__decay_t<decltype (stdexec::__sexpr_impl<_Tag>::get_state(__declval<_Sexpr>(), __declval<_Receiver&>()))> [with _Tag = exec::__repeat_effect_until::__repeat_effect_until_tag; _Sexpr = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__let::__receiver_with_sched<stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t, asio2exec::__detail::scheduler_t>]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:306:11:   required by substitution of ‘template<bool _AllOK> template<template<template<class ...> class _Fn, class ... _Args> template<bool _AllOK> template<class ...> class _Fn, class ... _Args> using stdexec::__i<_AllOK>::__g = _Fn<_Args ...> [with _Fn = stdexec::__detail::__state_type_t; _Args = {exec::__repeat_effect_until::__repeat_effect_until_tag, stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__let::__receiver_with_sched<stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t, asio2exec::__detail::scheduler_t>}; bool _AllOK = true]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:296:9:   required by substitution of ‘template<template<class ...> class _Fn, class ... _Args> using stdexec::__meval = typename stdexec::__i<_Ok<_Args ...> >::__g<template<class ...> class _Fn, _Args ...> [with _Fn = stdexec::__detail::__state_type_t; _Args = {exec::__repeat_effect_until::__repeat_effect_until_tag, stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__let::__receiver_with_sched<stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t, asio2exec::__detail::scheduler_t>}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:346:42:   [ skipping 69 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:758:53:   required by substitution of ‘template<class _Fun, class ... _As> using stdexec::__call_result_t = decltype (__declval<_Fun>()((__declval<_As>)()...)) [with _Fun = stdexec::__detail::__connect_fn<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t>::__impl; _As = {std::integer_sequence<long unsigned int, 0>*, stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, stdexec::__detail::__always<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__basic_sender<stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, main(int, char**)::<lambda(asio::ip::tcp::socket)>::<lambda(asio::ip::tcp::socket&, std::array<char, 1024>&, asio::steady_timer&)>, stdexec::__basic_sender<stdexec::__just::just_t, stdexec::__tup::__tuple<std::integer_sequence<long unsigned int, 0, 1, 2>*, asio::basic_stream_socket<asio::ip::tcp, asio::any_io_executor>, std::array<char, 1024>, asio::basic_waitable_timer<std::chrono::_V2::steady_clock, asio::wait_traits<std::chrono::_V2::steady_clock>, asio::any_io_executor> > > > >, asio2exec::__detail::scheduler_t::__schedule_sender_t}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__concepts.hpp:27:33:   recursively required by substitution of ‘template<class _Cvref, class _Fun> stdexec::__detail::__captures<stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, __always<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__basic_sender<stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, main(int, char**)::<lambda(asio::ip::tcp::socket)>::<lambda(asio::ip::tcp::socket&, std::array<char, 1024>&, asio::steady_timer&)>, stdexec::__basic_sender<stdexec::__just::just_t, stdexec::__tup::__tuple<std::integer_sequence<long unsigned int, 0, 1, 2>*, asio::basic_stream_socket<asio::ip::tcp, asio::any_io_executor>, std::array<char, 1024>, asio::basic_waitable_timer<std::chrono::_V2::steady_clock, asio::wait_traits<std::chrono::_V2::steady_clock>, asio::any_io_executor> > > > >, asio2exec::__detail::scheduler_t::__schedule_sender_t>(stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, __always<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__basic_sender<stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, main(int, char**)::<lambda(asio::ip::tcp::socket)>::<lambda(asio::ip::tcp::socket&, std::array<char, 1024>&, asio::steady_timer&)>, stdexec::__basic_sender<stdexec::__just::just_t, stdexec::__tup::__tuple<std::integer_sequence<long unsigned int, 0, 1, 2>*, asio::basic_stream_socket<asio::ip::tcp, asio::any_io_executor>, std::array<char, 1024>, asio::basic_waitable_timer<std::chrono::_V2::steady_clock, asio::wait_traits<std::chrono::_V2::steady_clock>, asio::any_io_executor> > > > >&&, asio2exec::__detail::scheduler_t::__schedule_sender_t&&)::<lambda(_Cvref, _Fun&&)> mutable [with _Cvref = stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>; _Fun = {stdexec::__detail::__always<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__basic_sender<stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain>, main(int, char**)::<lambda(asio::ip::tcp::socket)>::<lambda(asio::ip::tcp::socket&, std::array<char, 1024>&, asio::steady_timer&)>, stdexec::__basic_sender<stdexec::__just::just_t, stdexec::__tup::__tuple<std::integer_sequence<long unsigned int, 0, 1, 2>*, asio::basic_stream_socket<asio::ip::tcp, asio::any_io_executor>, std::array<char, 1024>, asio::basic_waitable_timer<std::chrono::_V2::steady_clock, asio::wait_traits<std::chrono::_V2::steady_clock>, asio::any_io_executor> > > > >, asio2exec::__detail::scheduler_t::__schedule_sender_t}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__concepts.hpp:27:33:   required by substitution of ‘template<class _Sender, class _Receiver> stdexec::__detail::<lambda(_Sender&&, _Receiver)> [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:767:36:   required by substitution of ‘template<class _Self, class _Receiver>  requires  __decays_to<_Self, stdexec::__sexpr<_DescriptorFn, <template-parameter-1-2> > > stdexec::__msecond<stdexec::__if_c<__decays_to<_Self, stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon> >, void>, decltype (stdexec::__sexpr_impl<stdexec::__meval<stdexec::__msecond, _Self, stdexec::__let::__let_t<stdexec::__receivers::set_value_t, stdexec::default_domain> > >::connect(__declval<_Self>(), __declval<_Receiver>()))> stdexec::tag_invoke(const __connect::connect_t&, _Self&&, _Receiver&&) [with _Self = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/../functional.hpp:339:19:   required by substitution of ‘template<class _Sender, class _Receiver>  requires (sender<_Sender, stdexec::__env::empty_env>) && (receiver<_Receiver>) && ((__connectable_with_tag_invoke<_Sender, _Receiver>) || (__connectable_with_co_await<_Sender, _Receiver>) || (__is_debug_env<decltype((__declval()())((__declval<_Receiver>)()))>)) stdexec::__call_result_t<decltype (__select_impl<_Sender, _Receiver>())> stdexec::__connect::connect_t::operator()(_Sender&&, _Receiver&&) const [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__domain.hpp:77:25:   recursively required by substitution of ‘template<class _Tag, class _Sender, class ... _Args>  requires (__has_legacy_c11n<_Tag, _Sender, _Args ...>) || (__has_apply_sender<_Tag, _Sender, _Args ...>) decltype(auto) stdexec::default_domain::apply_sender(_Tag, _Sender&&, _Args&& ...) const [with _Tag = stdexec::__start_detached::start_detached_t; _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Args = {}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__domain.hpp:77:25:   required by substitution of ‘template<class _Domain, class _Tag, class _Sender, class ... _Args>  requires  __has_implementation_for<_Tag, _Domain, _Sender, _Args ...> decltype(auto) stdexec::apply_sender_t::operator()(_Domain, _Tag, _Sender&&, _Args&& ...) const [with _Domain = stdexec::dependent_domain; _Tag = stdexec::__start_detached::start_detached_t; _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Args = {}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__concepts.hpp:27:33:   required by substitution of ‘template<class _Sender>  requires (sender_in<_Sender, stdexec::__env::empty_env>) && (__callable<stdexec::apply_sender_t, decltype((__declval()())((__declval<_Sender>)(), __declval()())), stdexec::__start_detached::start_detached_t, _Sender>) void stdexec::__start_detached::start_detached_t::operator()(_Sender&&) const [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>]’
/root/project/cpp/asio2exec/examples/echo_server.cpp:82:39:   required from here
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/../concepts.hpp:106:11:   required for the satisfaction of ‘constructible_from<typename decltype (__mdecay<_Ty>)::__f<_Ty>, _Sender>’ [with _Sender = stdexec::__sexpr<{}, stdexec::<unnamed>::__anon>&]
/root/project/cpp/asio2exec/stdexec/include/stdexec/execution.hpp:787:11:   required for the satisfaction of ‘sender<_Sender, stdexec::__env::empty_env>’ [with _Sender = stdexec::__sexpr<{}, stdexec::<unnamed>::__anon>&]
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/../concepts.hpp:108:5: note:   ‘stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>’ is not constructible from ‘‘reference_type’ not supported by dump_expr<expression error>’
  108 |     __is_constructible(_Ty, _As...);
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp: In instantiation of ‘struct exec::__repeat_effect_until::__repeat_effect_state<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__let::__receiver_with_sched<stdexec::__submit_::__receiver<stdexec::{anonymous}::<lambda(_Ty&)>::<lambda()> >, asio2exec::__detail::scheduler_t> >’:
/root/project/cpp/asio2exec/stdexec/include/exec/repeat_effect_until.hpp:171:79:   required from ‘exec::__repeat_effect_until::__repeat_effect_until_impl::<lambda(_Sender&&, _Receiver&)> [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__let::__receiver_with_sched<stdexec::__submit_::__receiver<stdexec::{anonymous}::<lambda(_Ty&)>::<lambda()> >, asio2exec::__detail::scheduler_t>]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:767:36:   required by substitution of ‘template<class _Tag, class _Sexpr, class _Receiver> using stdexec::__detail::__state_type_t = stdexec::__decay_t<decltype (stdexec::__sexpr_impl<_Tag>::get_state(__declval<_Sexpr>(), __declval<_Receiver&>()))> [with _Tag = exec::__repeat_effect_until::__repeat_effect_until_tag; _Sexpr = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__let::__receiver_with_sched<stdexec::__submit_::__receiver<stdexec::{anonymous}::<lambda(_Ty&)>::<lambda()> >, asio2exec::__detail::scheduler_t>]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:306:11:   required by substitution of ‘template<bool _AllOK> template<template<template<class ...> class _Fn, class ... _Args> template<bool _AllOK> template<class ...> class _Fn, class ... _Args> using stdexec::__i<_AllOK>::__g = _Fn<_Args ...> [with _Fn = stdexec::__detail::__state_type_t; _Args = {exec::__repeat_effect_until::__repeat_effect_until_tag, stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__let::__receiver_with_sched<stdexec::__submit_::__receiver<stdexec::{anonymous}::<lambda(_Ty&)>::<lambda()> >, asio2exec::__detail::scheduler_t>}; bool _AllOK = true]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:296:9:   required by substitution of ‘template<template<class ...> class _Fn, class ... _Args> using stdexec::__meval = typename stdexec::__i<_Ok<_Args ...> >::__g<template<class ...> class _Fn, _Args ...> [with _Fn = stdexec::__detail::__state_type_t; _Args = {exec::__repeat_effect_until::__repeat_effect_until_tag, stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__let::__receiver_with_sched<stdexec::__submit_::__receiver<stdexec::{anonymous}::<lambda(_Ty&)>::<lambda()> >, asio2exec::__detail::scheduler_t>}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:346:42:   required by substitution of ‘template<class _Sender, class _Receiver> stdexec::__detail::<lambda(_Sender&&, _Receiver)> [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__let::__receiver_with_sched<stdexec::__submit_::__receiver<stdexec::{anonymous}::<lambda(_Ty&)>::<lambda()> >, asio2exec::__detail::scheduler_t>]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:767:36:   [ skipping 73 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/../functional.hpp:339:19:   required by substitution of ‘template<class _Sender, class _Receiver>  requires (sender<_Sender, stdexec::__env::empty_env>) && (receiver<_Receiver>) && ((__connectable_with_tag_invoke<_Sender, _Receiver>) || (__connectable_with_co_await<_Sender, _Receiver>) || (__is_debug_env<decltype((__declval()())((__declval<_Receiver>)()))>)) stdexec::__call_result_t<decltype (__select_impl<_Sender, _Receiver>())> stdexec::__connect::connect_t::operator()(_Sender&&, _Receiver&&) const [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__submit_::__receiver<stdexec::{anonymous}::<lambda(_Ty&)>::<lambda()> >]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:758:53:   required by substitution of ‘template<class _Fun, class ... _As> using stdexec::__call_result_t = decltype (__declval<_Fun>()((__declval<_As>)()...)) [with _Fun = stdexec::__connect::connect_t; _As = {stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__submit_::__receiver<stdexec::{anonymous}::<lambda(_Ty&)>::<lambda()> >}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__execution_fwd.hpp:137:9:   required by substitution of ‘template<class _Sender, class _Receiver> using stdexec::connect_result_t = stdexec::__call_result_t<stdexec::__connect::connect_t, _Sender, _Receiver> [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__submit_::__receiver<stdexec::{anonymous}::<lambda(_Ty&)>::<lambda()> >]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/execution.hpp:1904:47:   required from ‘struct stdexec::__submit_::__operation<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env> >’
/root/project/cpp/asio2exec/stdexec/include/stdexec/execution.hpp:1932:18:   required from ‘void stdexec::__submit_::__submit_t::operator()(_Sender&&, _Receiver) const [with _Receiver = stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t; _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/execution.hpp:2053:17:   required from ‘void stdexec::__start_detached::start_detached_t::apply_sender(_Sender&&, _Env&&) const [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Env = stdexec::__env::empty_env]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__domain.hpp:123:35:   required from ‘decltype(auto) stdexec::default_domain::apply_sender(_Tag, _Sender&&, _Args&& ...) const [with _Tag = stdexec::__start_detached::start_detached_t; _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Args = {}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__domain.hpp:77:25:   required by substitution of ‘template<class _Domain, class _Tag, class _Sender, class ... _Args>  requires  __has_implementation_for<_Tag, _Domain, _Sender, _Args ...> decltype(auto) stdexec::apply_sender_t::operator()(_Domain, _Tag, _Sender&&, _Args&& ...) const [with _Domain = stdexec::dependent_domain; _Tag = stdexec::__start_detached::start_detached_t; _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Args = {}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__concepts.hpp:27:33:   required by substitution of ‘template<class _Sender>  requires (sender_in<_Sender, stdexec::__env::empty_env>) && (__callable<stdexec::apply_sender_t, decltype((__declval()())((__declval<_Sender>)(), __declval()())), stdexec::__start_detached::start_detached_t, _Sender>) void stdexec::__start_detached::start_detached_t::operator()(_Sender&&) const [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>]’
/root/project/cpp/asio2exec/examples/echo_server.cpp:82:39:   required from here
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:767:36: error: no match for call to ‘(const stdexec::__on::on_t) (exec::__trampoline::__scheduler, stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>&)’
  767 |   using __result_of = decltype(_Fun(__declval<_As>()...));
      |                                ~~~~^~~~~~~~~~~~~~~~~~~~~
/root/project/cpp/asio2exec/stdexec/include/stdexec/execution.hpp:4589:12: note: candidate: ‘template<class _Scheduler, class _Sender>  requires (scheduler<_Scheduler>) && (sender<_Sender, stdexec::__env::empty_env>) auto [requires stdexec::__well_formed_sender<<placeholder>, >] stdexec::__on::on_t::operator()(_Scheduler&&, _Sender&&) const’
 4589 |       auto operator()(_Scheduler&& __sched, _Sender&& __sndr) const -> __well_formed_sender auto {
      |            ^~~~~~~~
/root/project/cpp/asio2exec/stdexec/include/stdexec/execution.hpp:4589:12: note:   template argument deduction/substitution failed:
/root/project/cpp/asio2exec/stdexec/include/stdexec/execution.hpp:4589:12: note: constraints not satisfied
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/../concepts.hpp: In substitution of ‘template<class _Scheduler, class _Sender>  requires (scheduler<_Scheduler>) && (sender<_Sender, stdexec::__env::empty_env>) auto [requires stdexec::__well_formed_sender<<placeholder>, >] stdexec::__on::on_t::operator()(_Scheduler&&, _Sender&&) const [with _Scheduler = exec::__trampoline::__scheduler; _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>&]’:
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:767:36:   required from ‘struct exec::__repeat_effect_until::__repeat_effect_state<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__let::__receiver_with_sched<stdexec::__submit_::__receiver<stdexec::{anonymous}::<lambda(_Ty&)>::<lambda()> >, asio2exec::__detail::scheduler_t> >’
/root/project/cpp/asio2exec/stdexec/include/exec/repeat_effect_until.hpp:171:79:   required from ‘exec::__repeat_effect_until::__repeat_effect_until_impl::<lambda(_Sender&&, _Receiver&)> [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__let::__receiver_with_sched<stdexec::__submit_::__receiver<stdexec::{anonymous}::<lambda(_Ty&)>::<lambda()> >, asio2exec::__detail::scheduler_t>]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:767:36:   required by substitution of ‘template<class _Tag, class _Sexpr, class _Receiver> using stdexec::__detail::__state_type_t = stdexec::__decay_t<decltype (stdexec::__sexpr_impl<_Tag>::get_state(__declval<_Sexpr>(), __declval<_Receiver&>()))> [with _Tag = exec::__repeat_effect_until::__repeat_effect_until_tag; _Sexpr = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__let::__receiver_with_sched<stdexec::__submit_::__receiver<stdexec::{anonymous}::<lambda(_Ty&)>::<lambda()> >, asio2exec::__detail::scheduler_t>]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:306:11:   required by substitution of ‘template<bool _AllOK> template<template<template<class ...> class _Fn, class ... _Args> template<bool _AllOK> template<class ...> class _Fn, class ... _Args> using stdexec::__i<_AllOK>::__g = _Fn<_Args ...> [with _Fn = stdexec::__detail::__state_type_t; _Args = {exec::__repeat_effect_until::__repeat_effect_until_tag, stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__let::__receiver_with_sched<stdexec::__submit_::__receiver<stdexec::{anonymous}::<lambda(_Ty&)>::<lambda()> >, asio2exec::__detail::scheduler_t>}; bool _AllOK = true]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:296:9:   required by substitution of ‘template<template<class ...> class _Fn, class ... _Args> using stdexec::__meval = typename stdexec::__i<_Ok<_Args ...> >::__g<template<class ...> class _Fn, _Args ...> [with _Fn = stdexec::__detail::__state_type_t; _Args = {exec::__repeat_effect_until::__repeat_effect_until_tag, stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__let::__receiver_with_sched<stdexec::__submit_::__receiver<stdexec::{anonymous}::<lambda(_Ty&)>::<lambda()> >, asio2exec::__detail::scheduler_t>}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:346:42:   [ skipping 74 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/../functional.hpp:339:19:   required by substitution of ‘template<class _Sender, class _Receiver>  requires (sender<_Sender, stdexec::__env::empty_env>) && (receiver<_Receiver>) && ((__connectable_with_tag_invoke<_Sender, _Receiver>) || (__connectable_with_co_await<_Sender, _Receiver>) || (__is_debug_env<decltype((__declval()())((__declval<_Receiver>)()))>)) stdexec::__call_result_t<decltype (__select_impl<_Sender, _Receiver>())> stdexec::__connect::connect_t::operator()(_Sender&&, _Receiver&&) const [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__submit_::__receiver<stdexec::{anonymous}::<lambda(_Ty&)>::<lambda()> >]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:758:53:   required by substitution of ‘template<class _Fun, class ... _As> using stdexec::__call_result_t = decltype (__declval<_Fun>()((__declval<_As>)()...)) [with _Fun = stdexec::__connect::connect_t; _As = {stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__submit_::__receiver<stdexec::{anonymous}::<lambda(_Ty&)>::<lambda()> >}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__execution_fwd.hpp:137:9:   required by substitution of ‘template<class _Sender, class _Receiver> using stdexec::connect_result_t = stdexec::__call_result_t<stdexec::__connect::connect_t, _Sender, _Receiver> [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__submit_::__receiver<stdexec::{anonymous}::<lambda(_Ty&)>::<lambda()> >]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/execution.hpp:1904:47:   required from ‘struct stdexec::__submit_::__operation<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env> >’
/root/project/cpp/asio2exec/stdexec/include/stdexec/execution.hpp:1932:18:   required from ‘void stdexec::__submit_::__submit_t::operator()(_Sender&&, _Receiver) const [with _Receiver = stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t; _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/execution.hpp:2053:17:   required from ‘void stdexec::__start_detached::start_detached_t::apply_sender(_Sender&&, _Env&&) const [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Env = stdexec::__env::empty_env]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__domain.hpp:123:35:   required from ‘decltype(auto) stdexec::default_domain::apply_sender(_Tag, _Sender&&, _Args&& ...) const [with _Tag = stdexec::__start_detached::start_detached_t; _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Args = {}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__domain.hpp:77:25:   required by substitution of ‘template<class _Domain, class _Tag, class _Sender, class ... _Args>  requires  __has_implementation_for<_Tag, _Domain, _Sender, _Args ...> decltype(auto) stdexec::apply_sender_t::operator()(_Domain, _Tag, _Sender&&, _Args&& ...) const [with _Domain = stdexec::dependent_domain; _Tag = stdexec::__start_detached::start_detached_t; _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Args = {}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__concepts.hpp:27:33:   required by substitution of ‘template<class _Sender>  requires (sender_in<_Sender, stdexec::__env::empty_env>) && (__callable<stdexec::apply_sender_t, decltype((__declval()())((__declval<_Sender>)(), __declval()())), stdexec::__start_detached::start_detached_t, _Sender>) void stdexec::__start_detached::start_detached_t::operator()(_Sender&&) const [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>]’
/root/project/cpp/asio2exec/examples/echo_server.cpp:82:39:   required from here
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/../concepts.hpp:106:11:   required for the satisfaction of ‘constructible_from<typename decltype (__mdecay<_Ty>)::__f<_Ty>, _Sender>’ [with _Sender = stdexec::__sexpr<{}, stdexec::<unnamed>::__anon>&]
/root/project/cpp/asio2exec/stdexec/include/stdexec/execution.hpp:787:11:   required for the satisfaction of ‘sender<_Sender, stdexec::__env::empty_env>’ [with _Sender = stdexec::__sexpr<{}, stdexec::<unnamed>::__anon>&]
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/../concepts.hpp:108:5: note:   ‘stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>’ is not constructible from ‘‘reference_type’ not supported by dump_expr<expression error>’
  108 |     __is_constructible(_Ty, _As...);
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp: In instantiation of ‘struct exec::__repeat_effect_until::__repeat_effect_state<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__let::__receiver_with_sched<stdexec::__submit_::__receiver<stdexec::{anonymous}::<lambda(_Ty&)>::<lambda()> >, asio2exec::__detail::scheduler_t> >’:
/root/project/cpp/asio2exec/stdexec/include/exec/repeat_effect_until.hpp:171:79:   required from ‘exec::__repeat_effect_until::__repeat_effect_until_impl::<lambda(_Sender&&, _Receiver&)> [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__let::__receiver_with_sched<stdexec::__submit_::__receiver<stdexec::{anonymous}::<lambda(_Ty&)>::<lambda()> >, asio2exec::__detail::scheduler_t>]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:767:36:   required by substitution of ‘template<class _Tag, class _Sexpr, class _Receiver> using stdexec::__detail::__state_type_t = stdexec::__decay_t<decltype (stdexec::__sexpr_impl<_Tag>::get_state(__declval<_Sexpr>(), __declval<_Receiver&>()))> [with _Tag = exec::__repeat_effect_until::__repeat_effect_until_tag; _Sexpr = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__let::__receiver_with_sched<stdexec::__submit_::__receiver<stdexec::{anonymous}::<lambda(_Ty&)>::<lambda()> >, asio2exec::__detail::scheduler_t>]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:306:11:   required by substitution of ‘template<bool _AllOK> template<template<template<class ...> class _Fn, class ... _Args> template<bool _AllOK> template<class ...> class _Fn, class ... _Args> using stdexec::__i<_AllOK>::__g = _Fn<_Args ...> [with _Fn = stdexec::__detail::__state_type_t; _Args = {exec::__repeat_effect_until::__repeat_effect_until_tag, stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__let::__receiver_with_sched<stdexec::__submit_::__receiver<stdexec::{anonymous}::<lambda(_Ty&)>::<lambda()> >, asio2exec::__detail::scheduler_t>}; bool _AllOK = true]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:296:9:   required by substitution of ‘template<template<class ...> class _Fn, class ... _Args> using stdexec::__meval = typename stdexec::__i<_Ok<_Args ...> >::__g<template<class ...> class _Fn, _Args ...> [with _Fn = stdexec::__detail::__state_type_t; _Args = {exec::__repeat_effect_until::__repeat_effect_until_tag, stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__let::__receiver_with_sched<stdexec::__submit_::__receiver<stdexec::{anonymous}::<lambda(_Ty&)>::<lambda()> >, asio2exec::__detail::scheduler_t>}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:346:42:   required by substitution of ‘template<class _Sender, class _Receiver> stdexec::__detail::<lambda(_Sender&&, _Receiver)> [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__let::__receiver_with_sched<stdexec::__submit_::__receiver<stdexec::{anonymous}::<lambda(_Ty&)>::<lambda()> >, asio2exec::__detail::scheduler_t>]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:767:36:   [ skipping 73 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/../functional.hpp:339:19:   required by substitution of ‘template<class _Sender, class _Receiver>  requires (sender<_Sender, stdexec::__env::empty_env>) && (receiver<_Receiver>) && ((__connectable_with_tag_invoke<_Sender, _Receiver>) || (__connectable_with_co_await<_Sender, _Receiver>) || (__is_debug_env<decltype((__declval()())((__declval<_Receiver>)()))>)) stdexec::__call_result_t<decltype (__select_impl<_Sender, _Receiver>())> stdexec::__connect::connect_t::operator()(_Sender&&, _Receiver&&) const [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__submit_::__receiver<stdexec::{anonymous}::<lambda(_Ty&)>::<lambda()> >]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:758:53:   required by substitution of ‘template<class _Fun, class ... _As> using stdexec::__call_result_t = decltype (__declval<_Fun>()((__declval<_As>)()...)) [with _Fun = stdexec::__connect::connect_t; _As = {stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__submit_::__receiver<stdexec::{anonymous}::<lambda(_Ty&)>::<lambda()> >}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__execution_fwd.hpp:137:9:   required by substitution of ‘template<class _Sender, class _Receiver> using stdexec::connect_result_t = stdexec::__call_result_t<stdexec::__connect::connect_t, _Sender, _Receiver> [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__submit_::__receiver<stdexec::{anonymous}::<lambda(_Ty&)>::<lambda()> >]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/execution.hpp:1904:47:   required from ‘struct stdexec::__submit_::__operation<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env> >’
/root/project/cpp/asio2exec/stdexec/include/stdexec/execution.hpp:1932:18:   required from ‘void stdexec::__submit_::__submit_t::operator()(_Sender&&, _Receiver) const [with _Receiver = stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t; _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/execution.hpp:2053:17:   required from ‘void stdexec::__start_detached::start_detached_t::apply_sender(_Sender&&, _Env&&) const [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Env = stdexec::__env::empty_env]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__domain.hpp:123:35:   required from ‘decltype(auto) stdexec::default_domain::apply_sender(_Tag, _Sender&&, _Args&& ...) const [with _Tag = stdexec::__start_detached::start_detached_t; _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Args = {}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__domain.hpp:77:25:   required by substitution of ‘template<class _Domain, class _Tag, class _Sender, class ... _Args>  requires  __has_implementation_for<_Tag, _Domain, _Sender, _Args ...> decltype(auto) stdexec::apply_sender_t::operator()(_Domain, _Tag, _Sender&&, _Args&& ...) const [with _Domain = stdexec::dependent_domain; _Tag = stdexec::__start_detached::start_detached_t; _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Args = {}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__concepts.hpp:27:33:   required by substitution of ‘template<class _Sender>  requires (sender_in<_Sender, stdexec::__env::empty_env>) && (__callable<stdexec::apply_sender_t, decltype((__declval()())((__declval<_Sender>)(), __declval()())), stdexec::__start_detached::start_detached_t, _Sender>) void stdexec::__start_detached::start_detached_t::operator()(_Sender&&) const [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>]’
/root/project/cpp/asio2exec/examples/echo_server.cpp:82:39:   required from here
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:767:36: error: no match for call to ‘(const stdexec::__on::on_t) (exec::__trampoline::__scheduler, stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>&)’
  767 |   using __result_of = decltype(_Fun(__declval<_As>()...));
      |                                ~~~~^~~~~~~~~~~~~~~~~~~~~
/root/project/cpp/asio2exec/stdexec/include/stdexec/execution.hpp:4589:12: note: candidate: ‘template<class _Scheduler, class _Sender>  requires (scheduler<_Scheduler>) && (sender<_Sender, stdexec::__env::empty_env>) auto [requires stdexec::__well_formed_sender<<placeholder>, >] stdexec::__on::on_t::operator()(_Scheduler&&, _Sender&&) const’
 4589 |       auto operator()(_Scheduler&& __sched, _Sender&& __sndr) const -> __well_formed_sender auto {
      |            ^~~~~~~~
/root/project/cpp/asio2exec/stdexec/include/stdexec/execution.hpp:4589:12: note:   template argument deduction/substitution failed:
/root/project/cpp/asio2exec/stdexec/include/stdexec/execution.hpp:4589:12: note: constraints not satisfied
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/../concepts.hpp: In substitution of ‘template<class _Scheduler, class _Sender>  requires (scheduler<_Scheduler>) && (sender<_Sender, stdexec::__env::empty_env>) auto [requires stdexec::__well_formed_sender<<placeholder>, >] stdexec::__on::on_t::operator()(_Scheduler&&, _Sender&&) const [with _Scheduler = exec::__trampoline::__scheduler; _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>&]’:
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:767:36:   required from ‘struct exec::__repeat_effect_until::__repeat_effect_state<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__let::__receiver_with_sched<stdexec::__submit_::__receiver<stdexec::{anonymous}::<lambda(_Ty&)>::<lambda()> >, asio2exec::__detail::scheduler_t> >’
/root/project/cpp/asio2exec/stdexec/include/exec/repeat_effect_until.hpp:171:79:   required from ‘exec::__repeat_effect_until::__repeat_effect_until_impl::<lambda(_Sender&&, _Receiver&)> [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__let::__receiver_with_sched<stdexec::__submit_::__receiver<stdexec::{anonymous}::<lambda(_Ty&)>::<lambda()> >, asio2exec::__detail::scheduler_t>]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:767:36:   required by substitution of ‘template<class _Tag, class _Sexpr, class _Receiver> using stdexec::__detail::__state_type_t = stdexec::__decay_t<decltype (stdexec::__sexpr_impl<_Tag>::get_state(__declval<_Sexpr>(), __declval<_Receiver&>()))> [with _Tag = exec::__repeat_effect_until::__repeat_effect_until_tag; _Sexpr = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__let::__receiver_with_sched<stdexec::__submit_::__receiver<stdexec::{anonymous}::<lambda(_Ty&)>::<lambda()> >, asio2exec::__detail::scheduler_t>]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:306:11:   required by substitution of ‘template<bool _AllOK> template<template<template<class ...> class _Fn, class ... _Args> template<bool _AllOK> template<class ...> class _Fn, class ... _Args> using stdexec::__i<_AllOK>::__g = _Fn<_Args ...> [with _Fn = stdexec::__detail::__state_type_t; _Args = {exec::__repeat_effect_until::__repeat_effect_until_tag, stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__let::__receiver_with_sched<stdexec::__submit_::__receiver<stdexec::{anonymous}::<lambda(_Ty&)>::<lambda()> >, asio2exec::__detail::scheduler_t>}; bool _AllOK = true]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:296:9:   required by substitution of ‘template<template<class ...> class _Fn, class ... _Args> using stdexec::__meval = typename stdexec::__i<_Ok<_Args ...> >::__g<template<class ...> class _Fn, _Args ...> [with _Fn = stdexec::__detail::__state_type_t; _Args = {exec::__repeat_effect_until::__repeat_effect_until_tag, stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__let::__receiver_with_sched<stdexec::__submit_::__receiver<stdexec::{anonymous}::<lambda(_Ty&)>::<lambda()> >, asio2exec::__detail::scheduler_t>}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:346:42:   [ skipping 74 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/../functional.hpp:339:19:   required by substitution of ‘template<class _Sender, class _Receiver>  requires (sender<_Sender, stdexec::__env::empty_env>) && (receiver<_Receiver>) && ((__connectable_with_tag_invoke<_Sender, _Receiver>) || (__connectable_with_co_await<_Sender, _Receiver>) || (__is_debug_env<decltype((__declval()())((__declval<_Receiver>)()))>)) stdexec::__call_result_t<decltype (__select_impl<_Sender, _Receiver>())> stdexec::__connect::connect_t::operator()(_Sender&&, _Receiver&&) const [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__submit_::__receiver<stdexec::{anonymous}::<lambda(_Ty&)>::<lambda()> >]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__meta.hpp:758:53:   required by substitution of ‘template<class _Fun, class ... _As> using stdexec::__call_result_t = decltype (__declval<_Fun>()((__declval<_As>)()...)) [with _Fun = stdexec::__connect::connect_t; _As = {stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__submit_::__receiver<stdexec::{anonymous}::<lambda(_Ty&)>::<lambda()> >}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__execution_fwd.hpp:137:9:   required by substitution of ‘template<class _Sender, class _Receiver> using stdexec::connect_result_t = stdexec::__call_result_t<stdexec::__connect::connect_t, _Sender, _Receiver> [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Receiver = stdexec::__submit_::__receiver<stdexec::{anonymous}::<lambda(_Ty&)>::<lambda()> >]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/execution.hpp:1904:47:   required from ‘struct stdexec::__submit_::__operation<stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>, stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env> >’
/root/project/cpp/asio2exec/stdexec/include/stdexec/execution.hpp:1932:18:   required from ‘void stdexec::__submit_::__submit_t::operator()(_Sender&&, _Receiver) const [with _Receiver = stdexec::__start_detached::__detached_receiver<stdexec::__env::empty_env>::__t; _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/execution.hpp:2053:17:   required from ‘void stdexec::__start_detached::start_detached_t::apply_sender(_Sender&&, _Env&&) const [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Env = stdexec::__env::empty_env]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__domain.hpp:123:35:   required from ‘decltype(auto) stdexec::default_domain::apply_sender(_Tag, _Sender&&, _Args&& ...) const [with _Tag = stdexec::__start_detached::start_detached_t; _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Args = {}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__domain.hpp:77:25:   required by substitution of ‘template<class _Domain, class _Tag, class _Sender, class ... _Args>  requires  __has_implementation_for<_Tag, _Domain, _Sender, _Args ...> decltype(auto) stdexec::apply_sender_t::operator()(_Domain, _Tag, _Sender&&, _Args&& ...) const [with _Domain = stdexec::dependent_domain; _Tag = stdexec::__start_detached::start_detached_t; _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>; _Args = {}]’
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/__concepts.hpp:27:33:   required by substitution of ‘template<class _Sender>  requires (sender_in<_Sender, stdexec::__env::empty_env>) && (__callable<stdexec::apply_sender_t, decltype((__declval()())((__declval<_Sender>)(), __declval()())), stdexec::__start_detached::start_detached_t, _Sender>) void stdexec::__start_detached::start_detached_t::operator()(_Sender&&) const [with _Sender = stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>]’
/root/project/cpp/asio2exec/examples/echo_server.cpp:82:39:   required from here
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/../concepts.hpp:106:11:   required for the satisfaction of ‘constructible_from<typename decltype (__mdecay<_Ty>)::__f<_Ty>, _Sender>’ [with _Sender = stdexec::__sexpr<{}, stdexec::<unnamed>::__anon>&]
/root/project/cpp/asio2exec/stdexec/include/stdexec/execution.hpp:787:11:   required for the satisfaction of ‘sender<_Sender, stdexec::__env::empty_env>’ [with _Sender = stdexec::__sexpr<{}, stdexec::<unnamed>::__anon>&]
/root/project/cpp/asio2exec/stdexec/include/stdexec/__detail/../concepts.hpp:108:5: note:   ‘stdexec::__sexpr<<lambda closure object>stdexec::{anonymous}::<lambda()>(), stdexec::{anonymous}::__anon>’ is not constructible from ‘‘reference_type’ not supported by dump_expr<expression error>’
  108 |     __is_constructible(_Ty, _As...);
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
make[2]: *** [CMakeFiles/echo_server.dir/build.make:76: CMakeFiles/echo_server.dir/examples/echo_server.cpp.o] Error 1
make[1]: *** [CMakeFiles/Makefile2:203: CMakeFiles/echo_server.dir/all] Error 2
make: *** [Makefile:91: all] Error 2
